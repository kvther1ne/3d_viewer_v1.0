#ifndef _PARSER_H_
#define _PARSER_H_

#include <locale.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PEAK(A) &model->matrix_peaks[count][A]
#define kSCALING_FACTOR 0.1

/*!
\brief Возможные ошибки
\details Перечисление ERRORS представляет набор возможных ошибок, которые могут
возникнуть при выполнении операций в рамках программы DVI. Оно включает в себя
следующие значения ошибок: kOK, kFILE_READ_ERROR, kINCORRECT_PEAKS,
kINCORRECT_FILE и kMEMORY_ALLOCATION_ERROR.
*/
enum ERRORS {
  kOK,  ///< Отсутствие ошибок. Это значение указывает, что операция выполнена
        ///< успешно.
  kFILE_READ_ERROR,  ///< Ошибка чтения файла. Это значение указывает на
                     ///< возникновение проблемы при чтении данных из файла.
  kINCORRECT_PEAKS,  ///< Некорректные пики. Это значение указывает на
                     ///< обнаружение некорректных или неправильно
                     ///< сформированных вершин.
  kINCORRECT_FILE,  ///< Некорректный файл. Это значение указывает на
                    ///< неправильный формат или структуру файла, который не
                    ///< может быть обработан корректно.
  kMEMORY_ALLOCATION_ERROR  ///< Ошибка выделения памяти. Это значение указывает
                            ///< на проблему с выделением достаточного объема
                            ///< памяти для выполнения операции.
};

/*!
\brief Структура модели
\details Структура Model представляет модель, которая состоит из вершин (пиков)
и полигонов. В структуре Model содержится информация о количестве вершин и
полигонов, матрица полигонов, массив ребер и матрица вершин.
*/
typedef struct model {
  size_t count_of_peaks;  ///< Значение типа size_t, представляющее количество
                          ///< вершин в модели.
  size_t count_of_poligons;  ///< Значение типа size_t, представляющее
                             ///< количество полигонов в модели.
  unsigned** matrix_poligons;  ///< Двумерный массив указателей на беззнаковые
                               ///< целые числа (unsigned int**), представляющий
                               ///< матрицу полигонов модели.
  size_t* array_for_edjes;  ///< Массив указателей на значения типа size_t
                            ///< (size_t*), представляющий массив ребер модели.
  double**
      matrix_peaks;  ///< Двумерный массив указателей на значения типа double
                     ///< (double**), представляющий матрицу вершин модели.
} Model;

/*!
\brief Функция парсера
\details Функция parser используется для разбора файла и заполнения структуры
Model данными о вершинах и полигонах. Она принимает указатель на структуру Model
и путь к файлу в качестве параметров.
\param[in] model Указатель на структуру Model, в которую будут записаны данные о
вершинах и полигонах.
\param[in] file Строка, представляющая путь к файлу, который будет разобран для
получения данных.
\param[out] int Возвращает 0 в случае успешного разбора файла. В случае ошибки
во время разбора файла или открытия файла возвращается отрицательное значение.
 */
int parser(Model* model, const char* file);
/*!
\brief Функция подсчета вершин и рёбер
\details Функция peaks_and_poligons_counter используется для подсчета количества
вершин и полигонов в файле. Она принимает указатель на структуру Model и
указатель на файл в качестве параметров.
\param[in] model Указатель на структуру
Model, в которую будут записаны данные о вершинах и полигонах.
\param[in] fp Указатель на файл, из которого будет осуществляться подсчет.
 */
void peaks_and_poligons_counter(Model* model, FILE* fp);
/*!
\brief Функция подсчета вершин в строке .obj файла
\details Функция vertexes_counter_for_poligon используется для подсчета
количества вершин в строке, представляющей полигон. Она принимает указатель на
строку в качестве параметра.
\param[in] line Указатель на строку, представляющую полигон.
\param[out] size_t Возвращает количество вершин в полигоне.
 */
size_t vertexes_counter_for_poligon(char* line);
/*!
\brief Функция освобождения памяти
\details Функция free_model используется для освобождения памяти, занимаемой
структурой Model и связанными с ней массивами и матрицами.
\param[in] model Указатель на структуру Model, которую нужно освободить.
 */
void free_model(Model* model);

/*!
\brief Функция выделения памяти под вершины модели
\details Функция allocation_for_peaks_matrix используется для выделения памяти
под матрицу вершин модели. Она принимает указатель на структуру Model и
указатель на переменную error в качестве параметров.
\param[in] model Указатель на структуру Model, для которой будет выделена память
под матрицу вершин.
\param[in] error Указатель на переменную int, в которую будет записано значение
ошибки. Если выделение памяти прошло успешно, значение error будет равно 0. В
случае ошибки выделения памяти, значение error будет отлично от 0.
\param[out] Model* Указатель на структуру Model. Если произошла ошибка выделения
памяти, функция вернет NULL.
 */
Model* allcation_for_peaks_matrix(Model* model, int* error);
/*!
\brief Функция выделения памяти под полигоны модели
\details Функция allocation_for_poligons используется для выделения памяти под
матрицу полигонов модели. Она принимает указатель на структуру Model и указатель
на переменную error в качестве параметров.
\param[in] model Указатель на структуру Model, для которой будет выделена память
под матрицу полигонов.
\param[in] error Указатель на переменную int, в которую
будет записано значение ошибки. Если выделение памяти прошло успешно, значение
error будет равно 0. В случае ошибки выделения памяти, значение error будет
отлично от 0.
\param[out] Model* Указатель на структуру Model. Если произошла
ошибка выделения памяти, функция вернет NULL.
 */
Model* allcation_for_poligons(Model* model, int* error);
/*!
\brief Функция выделения памяти под структуру модели
\details Функция allocation_and_initialization используется для выделения памяти
и инициализации структуры Model. Она принимает указатель на структуру Model и
указатель на переменную error в качестве параметров.
\param[in] model Указатель на структуру Model, для которой будет выделена память
и произведена инициализация.
\param[in] error Указатель на переменную int, в которую будет записано значение
ошибки. Если выделение памяти и инициализация прошли успешно, значение error
будет равно 0. В случае ошибки выделения памяти, значение error будет отлично от
0.
\param[out] Model* Указатель на структуру Model. Если произошла ошибка
выделения памяти, функция вернет NULL.
 */
Model* allocation_and_initialization(Model* model, int* error);
/*!
\brief Функция получения полигона из строки и добавления в структуру модели
\details Функция get_poligon используется для получения полигона из строки и
добавления его в структуру Model. Она принимает указатель на структуру Model,
указатель на строку line и указатель на переменную counter в качестве
параметров.
\param[in] model Указатель на структуру Model, в которую будет добавлен полигон.
\param[in] line Указатель на строку, представляющую полигон.
\param[in] error Указатель на переменную size_t, которая будет использоваться
для подсчета вершин в полигоне.
\param[out] Model* Указатель на структуру Model с добавленным полигоном. Если
произошла ошибка при добавлении полигона, функция вернет NULL.
 */
Model* get_poligon(Model* model, char* line, size_t* counter);

#endif  //_PARSER_H_
